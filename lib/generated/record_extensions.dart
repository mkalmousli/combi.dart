// Auto generated by `gen_record_extensions.dart`. Do not modify!
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark
import 'package:combi/combi.dart' as p;

extension RecordOf2ParsersExt<T0, T1> on (p.Parser<T0>, p.Parser<T1>) {
  p.Parser<(T0, T1)> toParser() =>
      p.list([$1, $2]).map((v) => (v[0] as T0, v[1] as T1));
  p.Parser<dynamic> altDynamic() => p.alt([$1, $2]);
}

extension RecordOf2ParsersExtSameType<T> on (p.Parser<T>, p.Parser<T>) {
  p.Parser<T> alt() => p.alt([$1, $2]);
}

extension E2ParsersExt<T0, T1> on p.Parser<(T0, T1)> {
  p.Parser<T1> get onlyLast => map((v) => v.$2);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
}

extension RecordOf3ParsersExt<T0, T1, T2>
    on (p.Parser<T0>, p.Parser<T1>, p.Parser<T2>) {
  p.Parser<(T0, T1, T2)> toParser() =>
      p.list([$1, $2, $3]).map((v) => (v[0] as T0, v[1] as T1, v[2] as T2));
  p.Parser<dynamic> altDynamic() => p.alt([$1, $2, $3]);
}

extension RecordOf3ParsersExtSameType<T>
    on (p.Parser<T>, p.Parser<T>, p.Parser<T>) {
  p.Parser<T> alt() => p.alt([$1, $2, $3]);
}

extension E3ParsersExt<T0, T1, T2> on p.Parser<(T0, T1, T2)> {
  p.Parser<T2> get onlyLast => map((v) => v.$3);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
}

extension RecordOf4ParsersExt<T0, T1, T2, T3>
    on (p.Parser<T0>, p.Parser<T1>, p.Parser<T2>, p.Parser<T3>) {
  p.Parser<(T0, T1, T2, T3)> toParser() => p
      .list([$1, $2, $3, $4])
      .map((v) => (v[0] as T0, v[1] as T1, v[2] as T2, v[3] as T3));
  p.Parser<dynamic> altDynamic() => p.alt([$1, $2, $3, $4]);
}

extension RecordOf4ParsersExtSameType<T>
    on (p.Parser<T>, p.Parser<T>, p.Parser<T>, p.Parser<T>) {
  p.Parser<T> alt() => p.alt([$1, $2, $3, $4]);
}

extension E4ParsersExt<T0, T1, T2, T3> on p.Parser<(T0, T1, T2, T3)> {
  p.Parser<T3> get onlyLast => map((v) => v.$4);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
}

extension RecordOf5ParsersExt<T0, T1, T2, T3, T4>
    on (p.Parser<T0>, p.Parser<T1>, p.Parser<T2>, p.Parser<T3>, p.Parser<T4>) {
  p.Parser<(T0, T1, T2, T3, T4)> toParser() => p
      .list([$1, $2, $3, $4, $5])
      .map((v) => (v[0] as T0, v[1] as T1, v[2] as T2, v[3] as T3, v[4] as T4));
  p.Parser<dynamic> altDynamic() => p.alt([$1, $2, $3, $4, $5]);
}

extension RecordOf5ParsersExtSameType<T>
    on (p.Parser<T>, p.Parser<T>, p.Parser<T>, p.Parser<T>, p.Parser<T>) {
  p.Parser<T> alt() => p.alt([$1, $2, $3, $4, $5]);
}

extension E5ParsersExt<T0, T1, T2, T3, T4> on p.Parser<(T0, T1, T2, T3, T4)> {
  p.Parser<T4> get onlyLast => map((v) => v.$5);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
}

extension RecordOf6ParsersExt<T0, T1, T2, T3, T4, T5>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5)> toParser() => p
      .list([$1, $2, $3, $4, $5, $6])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([$1, $2, $3, $4, $5, $6]);
}

extension RecordOf6ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([$1, $2, $3, $4, $5, $6]);
}

extension E6ParsersExt<T0, T1, T2, T3, T4, T5>
    on p.Parser<(T0, T1, T2, T3, T4, T5)> {
  p.Parser<T5> get onlyLast => map((v) => v.$6);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
}

extension RecordOf7ParsersExt<T0, T1, T2, T3, T4, T5, T6>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5, T6)> toParser() => p
      .list([$1, $2, $3, $4, $5, $6, $7])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([$1, $2, $3, $4, $5, $6, $7]);
}

extension RecordOf7ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([$1, $2, $3, $4, $5, $6, $7]);
}

extension E7ParsersExt<T0, T1, T2, T3, T4, T5, T6>
    on p.Parser<(T0, T1, T2, T3, T4, T5, T6)> {
  p.Parser<T6> get onlyLast => map((v) => v.$7);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
}

extension RecordOf8ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7)> toParser() => p
      .list([$1, $2, $3, $4, $5, $6, $7, $8])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([$1, $2, $3, $4, $5, $6, $7, $8]);
}

extension RecordOf8ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([$1, $2, $3, $4, $5, $6, $7, $8]);
}

extension E8ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7>
    on p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7)> {
  p.Parser<T7> get onlyLast => map((v) => v.$8);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
}

extension RecordOf9ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7, T8>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> toParser() => p
      .list([$1, $2, $3, $4, $5, $6, $7, $8, $9])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9]);
}

extension RecordOf9ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9]);
}

extension E9ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7, T8>
    on p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> {
  p.Parser<T8> get onlyLast => map((v) => v.$9);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
}

extension RecordOf10ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> toParser() => p
      .list([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
        ),
      );
  p.Parser<dynamic> altDynamic() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10]);
}

extension RecordOf10ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10]);
}

extension E10ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
    on p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> {
  p.Parser<T9> get onlyLast => map((v) => v.$10);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
}

extension RecordOf11ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> toParser() => p
      .list([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
        ),
      );
  p.Parser<dynamic> altDynamic() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11]);
}

extension RecordOf11ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11]);
}

extension E11ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
    on p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> {
  p.Parser<T10> get onlyLast => map((v) => v.$11);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
}

extension RecordOf12ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> toParser() => p
      .list([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
        ),
      );
  p.Parser<dynamic> altDynamic() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12]);
}

extension RecordOf12ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12]);
}

extension E12ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
    on p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> {
  p.Parser<T11> get onlyLast => map((v) => v.$12);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
}

extension RecordOf13ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>
  toParser() => p
      .list([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
        ),
      );
  p.Parser<dynamic> altDynamic() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13]);
}

extension RecordOf13ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13]);
}

extension E13ParsersExt<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
    on p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> {
  p.Parser<T12> get onlyLast => map((v) => v.$13);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
}

extension RecordOf14ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>
  toParser() => p
      .list([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
        ),
      );
  p.Parser<dynamic> altDynamic() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14]);
}

extension RecordOf14ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14]);
}

extension E14ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13
>
    on p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> {
  p.Parser<T13> get onlyLast => map((v) => v.$14);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
}

extension RecordOf15ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
        ) {
  p.Parser<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>
  toParser() => p
      .list([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
        ),
      );
  p.Parser<dynamic> altDynamic() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15]);
}

extension RecordOf15ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() =>
      p.alt([$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15]);
}

extension E15ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14
>
    on
        p.Parser<
          (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
        > {
  p.Parser<T14> get onlyLast => map((v) => v.$15);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
}

extension RecordOf16ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
        ) {
  p.Parser<
    (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
  ]);
}

extension RecordOf16ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
  ]);
}

extension E16ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15
>
    on
        p.Parser<
          (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
        > {
  p.Parser<T15> get onlyLast => map((v) => v.$16);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
}

extension RecordOf17ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
        ) {
  p.Parser<
    (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
  ]);
}

extension RecordOf17ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
  ]);
}

extension E17ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
          )
        > {
  p.Parser<T16> get onlyLast => map((v) => v.$17);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
}

extension RecordOf18ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
  ]);
}

extension RecordOf18ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
  ]);
}

extension E18ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
          )
        > {
  p.Parser<T17> get onlyLast => map((v) => v.$18);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
}

extension RecordOf19ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
  ]);
}

extension RecordOf19ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
  ]);
}

extension E19ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
          )
        > {
  p.Parser<T18> get onlyLast => map((v) => v.$19);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
}

extension RecordOf20ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
  ]);
}

extension RecordOf20ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
  ]);
}

extension E20ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
          )
        > {
  p.Parser<T19> get onlyLast => map((v) => v.$20);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
}

extension RecordOf21ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
  ]);
}

extension RecordOf21ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
  ]);
}

extension E21ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
          )
        > {
  p.Parser<T20> get onlyLast => map((v) => v.$21);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
}

extension RecordOf22ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
          p.Parser<T21>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
      T21,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
          v[21] as T21,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
  ]);
}

extension RecordOf22ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
  ]);
}

extension E22ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
          )
        > {
  p.Parser<T21> get onlyLast => map((v) => v.$22);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
  p.Parser<T21> get only22 => map((v) => v.$22);
}

extension RecordOf23ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
          p.Parser<T21>,
          p.Parser<T22>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
      T21,
      T22,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
        $23,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
          v[21] as T21,
          v[22] as T22,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
  ]);
}

extension RecordOf23ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
  ]);
}

extension E23ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
            T22,
          )
        > {
  p.Parser<T22> get onlyLast => map((v) => v.$23);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
  p.Parser<T21> get only22 => map((v) => v.$22);
  p.Parser<T22> get only23 => map((v) => v.$23);
}

extension RecordOf24ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
          p.Parser<T21>,
          p.Parser<T22>,
          p.Parser<T23>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
      T21,
      T22,
      T23,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
        $23,
        $24,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
          v[21] as T21,
          v[22] as T22,
          v[23] as T23,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
  ]);
}

extension RecordOf24ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
  ]);
}

extension E24ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
            T22,
            T23,
          )
        > {
  p.Parser<T23> get onlyLast => map((v) => v.$24);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
  p.Parser<T21> get only22 => map((v) => v.$22);
  p.Parser<T22> get only23 => map((v) => v.$23);
  p.Parser<T23> get only24 => map((v) => v.$24);
}

extension RecordOf25ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
          p.Parser<T21>,
          p.Parser<T22>,
          p.Parser<T23>,
          p.Parser<T24>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
      T21,
      T22,
      T23,
      T24,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
        $23,
        $24,
        $25,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
          v[21] as T21,
          v[22] as T22,
          v[23] as T23,
          v[24] as T24,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
  ]);
}

extension RecordOf25ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
  ]);
}

extension E25ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
            T22,
            T23,
            T24,
          )
        > {
  p.Parser<T24> get onlyLast => map((v) => v.$25);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
  p.Parser<T21> get only22 => map((v) => v.$22);
  p.Parser<T22> get only23 => map((v) => v.$23);
  p.Parser<T23> get only24 => map((v) => v.$24);
  p.Parser<T24> get only25 => map((v) => v.$25);
}

extension RecordOf26ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
          p.Parser<T21>,
          p.Parser<T22>,
          p.Parser<T23>,
          p.Parser<T24>,
          p.Parser<T25>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
      T21,
      T22,
      T23,
      T24,
      T25,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
        $23,
        $24,
        $25,
        $26,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
          v[21] as T21,
          v[22] as T22,
          v[23] as T23,
          v[24] as T24,
          v[25] as T25,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
  ]);
}

extension RecordOf26ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
  ]);
}

extension E26ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
            T22,
            T23,
            T24,
            T25,
          )
        > {
  p.Parser<T25> get onlyLast => map((v) => v.$26);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
  p.Parser<T21> get only22 => map((v) => v.$22);
  p.Parser<T22> get only23 => map((v) => v.$23);
  p.Parser<T23> get only24 => map((v) => v.$24);
  p.Parser<T24> get only25 => map((v) => v.$25);
  p.Parser<T25> get only26 => map((v) => v.$26);
}

extension RecordOf27ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25,
  T26
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
          p.Parser<T21>,
          p.Parser<T22>,
          p.Parser<T23>,
          p.Parser<T24>,
          p.Parser<T25>,
          p.Parser<T26>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
      T21,
      T22,
      T23,
      T24,
      T25,
      T26,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
        $23,
        $24,
        $25,
        $26,
        $27,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
          v[21] as T21,
          v[22] as T22,
          v[23] as T23,
          v[24] as T24,
          v[25] as T25,
          v[26] as T26,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
  ]);
}

extension RecordOf27ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
  ]);
}

extension E27ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25,
  T26
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
            T22,
            T23,
            T24,
            T25,
            T26,
          )
        > {
  p.Parser<T26> get onlyLast => map((v) => v.$27);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
  p.Parser<T21> get only22 => map((v) => v.$22);
  p.Parser<T22> get only23 => map((v) => v.$23);
  p.Parser<T23> get only24 => map((v) => v.$24);
  p.Parser<T24> get only25 => map((v) => v.$25);
  p.Parser<T25> get only26 => map((v) => v.$26);
  p.Parser<T26> get only27 => map((v) => v.$27);
}

extension RecordOf28ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25,
  T26,
  T27
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
          p.Parser<T21>,
          p.Parser<T22>,
          p.Parser<T23>,
          p.Parser<T24>,
          p.Parser<T25>,
          p.Parser<T26>,
          p.Parser<T27>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
      T21,
      T22,
      T23,
      T24,
      T25,
      T26,
      T27,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
        $23,
        $24,
        $25,
        $26,
        $27,
        $28,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
          v[21] as T21,
          v[22] as T22,
          v[23] as T23,
          v[24] as T24,
          v[25] as T25,
          v[26] as T26,
          v[27] as T27,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
  ]);
}

extension RecordOf28ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
  ]);
}

extension E28ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25,
  T26,
  T27
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
            T22,
            T23,
            T24,
            T25,
            T26,
            T27,
          )
        > {
  p.Parser<T27> get onlyLast => map((v) => v.$28);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
  p.Parser<T21> get only22 => map((v) => v.$22);
  p.Parser<T22> get only23 => map((v) => v.$23);
  p.Parser<T23> get only24 => map((v) => v.$24);
  p.Parser<T24> get only25 => map((v) => v.$25);
  p.Parser<T25> get only26 => map((v) => v.$26);
  p.Parser<T26> get only27 => map((v) => v.$27);
  p.Parser<T27> get only28 => map((v) => v.$28);
}

extension RecordOf29ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25,
  T26,
  T27,
  T28
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
          p.Parser<T21>,
          p.Parser<T22>,
          p.Parser<T23>,
          p.Parser<T24>,
          p.Parser<T25>,
          p.Parser<T26>,
          p.Parser<T27>,
          p.Parser<T28>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
      T21,
      T22,
      T23,
      T24,
      T25,
      T26,
      T27,
      T28,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
        $23,
        $24,
        $25,
        $26,
        $27,
        $28,
        $29,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
          v[21] as T21,
          v[22] as T22,
          v[23] as T23,
          v[24] as T24,
          v[25] as T25,
          v[26] as T26,
          v[27] as T27,
          v[28] as T28,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
    $29,
  ]);
}

extension RecordOf29ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
    $29,
  ]);
}

extension E29ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25,
  T26,
  T27,
  T28
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
            T22,
            T23,
            T24,
            T25,
            T26,
            T27,
            T28,
          )
        > {
  p.Parser<T28> get onlyLast => map((v) => v.$29);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
  p.Parser<T21> get only22 => map((v) => v.$22);
  p.Parser<T22> get only23 => map((v) => v.$23);
  p.Parser<T23> get only24 => map((v) => v.$24);
  p.Parser<T24> get only25 => map((v) => v.$25);
  p.Parser<T25> get only26 => map((v) => v.$26);
  p.Parser<T26> get only27 => map((v) => v.$27);
  p.Parser<T27> get only28 => map((v) => v.$28);
  p.Parser<T28> get only29 => map((v) => v.$29);
}

extension RecordOf30ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25,
  T26,
  T27,
  T28,
  T29
>
    on
        (
          p.Parser<T0>,
          p.Parser<T1>,
          p.Parser<T2>,
          p.Parser<T3>,
          p.Parser<T4>,
          p.Parser<T5>,
          p.Parser<T6>,
          p.Parser<T7>,
          p.Parser<T8>,
          p.Parser<T9>,
          p.Parser<T10>,
          p.Parser<T11>,
          p.Parser<T12>,
          p.Parser<T13>,
          p.Parser<T14>,
          p.Parser<T15>,
          p.Parser<T16>,
          p.Parser<T17>,
          p.Parser<T18>,
          p.Parser<T19>,
          p.Parser<T20>,
          p.Parser<T21>,
          p.Parser<T22>,
          p.Parser<T23>,
          p.Parser<T24>,
          p.Parser<T25>,
          p.Parser<T26>,
          p.Parser<T27>,
          p.Parser<T28>,
          p.Parser<T29>,
        ) {
  p.Parser<
    (
      T0,
      T1,
      T2,
      T3,
      T4,
      T5,
      T6,
      T7,
      T8,
      T9,
      T10,
      T11,
      T12,
      T13,
      T14,
      T15,
      T16,
      T17,
      T18,
      T19,
      T20,
      T21,
      T22,
      T23,
      T24,
      T25,
      T26,
      T27,
      T28,
      T29,
    )
  >
  toParser() => p
      .list([
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
        $23,
        $24,
        $25,
        $26,
        $27,
        $28,
        $29,
        $30,
      ])
      .map(
        (v) => (
          v[0] as T0,
          v[1] as T1,
          v[2] as T2,
          v[3] as T3,
          v[4] as T4,
          v[5] as T5,
          v[6] as T6,
          v[7] as T7,
          v[8] as T8,
          v[9] as T9,
          v[10] as T10,
          v[11] as T11,
          v[12] as T12,
          v[13] as T13,
          v[14] as T14,
          v[15] as T15,
          v[16] as T16,
          v[17] as T17,
          v[18] as T18,
          v[19] as T19,
          v[20] as T20,
          v[21] as T21,
          v[22] as T22,
          v[23] as T23,
          v[24] as T24,
          v[25] as T25,
          v[26] as T26,
          v[27] as T27,
          v[28] as T28,
          v[29] as T29,
        ),
      );
  p.Parser<dynamic> altDynamic() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
    $29,
    $30,
  ]);
}

extension RecordOf30ParsersExtSameType<T>
    on
        (
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
          p.Parser<T>,
        ) {
  p.Parser<T> alt() => p.alt([
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
    $29,
    $30,
  ]);
}

extension E30ParsersExt<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21,
  T22,
  T23,
  T24,
  T25,
  T26,
  T27,
  T28,
  T29
>
    on
        p.Parser<
          (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
            T22,
            T23,
            T24,
            T25,
            T26,
            T27,
            T28,
            T29,
          )
        > {
  p.Parser<T29> get onlyLast => map((v) => v.$30);
  p.Parser<T0> get onlyFirst => map((v) => v.$1);
  p.Parser<T0> get only1 => map((v) => v.$1);
  p.Parser<T1> get only2 => map((v) => v.$2);
  p.Parser<T2> get only3 => map((v) => v.$3);
  p.Parser<T3> get only4 => map((v) => v.$4);
  p.Parser<T4> get only5 => map((v) => v.$5);
  p.Parser<T5> get only6 => map((v) => v.$6);
  p.Parser<T6> get only7 => map((v) => v.$7);
  p.Parser<T7> get only8 => map((v) => v.$8);
  p.Parser<T8> get only9 => map((v) => v.$9);
  p.Parser<T9> get only10 => map((v) => v.$10);
  p.Parser<T10> get only11 => map((v) => v.$11);
  p.Parser<T11> get only12 => map((v) => v.$12);
  p.Parser<T12> get only13 => map((v) => v.$13);
  p.Parser<T13> get only14 => map((v) => v.$14);
  p.Parser<T14> get only15 => map((v) => v.$15);
  p.Parser<T15> get only16 => map((v) => v.$16);
  p.Parser<T16> get only17 => map((v) => v.$17);
  p.Parser<T17> get only18 => map((v) => v.$18);
  p.Parser<T18> get only19 => map((v) => v.$19);
  p.Parser<T19> get only20 => map((v) => v.$20);
  p.Parser<T20> get only21 => map((v) => v.$21);
  p.Parser<T21> get only22 => map((v) => v.$22);
  p.Parser<T22> get only23 => map((v) => v.$23);
  p.Parser<T23> get only24 => map((v) => v.$24);
  p.Parser<T24> get only25 => map((v) => v.$25);
  p.Parser<T25> get only26 => map((v) => v.$26);
  p.Parser<T26> get only27 => map((v) => v.$27);
  p.Parser<T27> get only28 => map((v) => v.$28);
  p.Parser<T28> get only29 => map((v) => v.$29);
  p.Parser<T29> get only30 => map((v) => v.$30);
}
